<?xml version="1.0" encoding="UTF-8"?>
<project name="Packager" default="build">

    <!-- Create New Release and package -->
    <target name="build-new" description="Update version/creation and create IDed package" depends="prompt-new-version">
        <if>
            <isset property="release.type"/>
            <then>
                <setVersion releasetype="${release.type}" file="${project.manifest}" property="manifest.version" customvalue="${release.custom_version}"/>
                <phingcall target="update-creation"/>

                <!-- Update the version for related extensions which are not on this repo, but still set to update -->
                <foreach list="${project.relatedExtensions}" param="extension" target="set-version-related-extensions" delimiter=","/>

                <phingcall target="package">
                    <property name="package.file" value="${project.name.long}_${composer.extra.package-license}_${manifest.version}.zip"/>
                </phingcall>

                <phingcall target="version"/>
            </then>
        </if>
    </target>

    <!-- Get version number without build -->
    <target name="version" description="Get the version from the current source">
        <echo>Current version: ${manifest.version}</echo>
        <echo>Creation date: ${manifest.creationDate}</echo>
    </target>

    <!-- Update version number without build -->
    <target name="set-version" description="Update version/creation and create IDed package" depends="prompt-new-version">
        <if>
            <isset property="release.type"/>
            <then>
                <setVersion releasetype="${release.type}" file="${project.manifest}" property="manifest.version" customvalue="${release.custom_version}"/>
                <phingcall target="update-creation"/>

                <!-- Update the version for related extensions which are not on this repo, but still set to update -->
                <foreach list="${project.relatedExtensions}" param="extension" target="set-version-related-extensions" delimiter=","/>

                <phingcall target="version"/>
            </then>
        </if>
    </target>

    <!-- Create Current Release and package -->
    <target name="build" description="Generate package file for current version">
        <property name="manifest.version" value="0.0.0" override="false"/>
        <phingcall target="package">
            <property name="package.file" value="${project.name.long}_${composer.extra.package-license}_${manifest.version}.zip"/>
        </phingcall>
    </target>

    <!-- Create Current Release in a tmp folder -->
    <target name="build-tmp" hidden="true">
        <property name="manifest.version" value="0.0.0" override="false"/>
        <phingcall target="package">
            <property name="buildingdirectly" value="0"/>
        </phingcall>
    </target>

    <!-- Set the version for the extension into a project -->
    <target name="set-version-related-extensions" hidden="true">
        <echo>set-version-related-extensions-${extension}</echo>
        <if>
            <isset property="extension"/>
            <then>
                <echo>Updating version for: ${extension}</echo>

                <!-- Related extensions which only exists in the free version, will be only found at the tmp folder -->
                <if>
                    <available file="${project.source.path}/extensions/${extension}" type="dir"/>
                    <then>
                        <property name="extensions.path" value="${project.source.path}/extensions" override="true"/>
                    </then>
                    <else>
                        <property name="extensions.path" value="${packages.tmp.path}/extensions" override="true"/>
                    </else>
                </if>

                <!-- Do we have this extension pre-packed? -->
                <if>
                    <available file="${extensions.path}/${extension}" type="dir"/>
                    <then>
                        <!-- Look for the manifest file of this internal extension -->
                        <property name="extension.manifest" value="${extensions.path}/${extension}/${project.relatedExtensions.${extension}.element}.xml"/>
                        <if>
                            <available file="${extension.manifest}"/>
                            <then/>
                            <else>
                                <!-- Look for the manifest file of this internal extension (fallback for modules) -->
                                <property name="extension.manifest" value="${extensions.path}/${extension}/mod_${project.relatedExtensions.${extension}.element}.xml" override="true"/>
                                <if>
                                    <available file="${extension.manifest}"/>
                                    <then/>
                                    <else>
                                        <!-- Template -->
                                        <property name="extension.manifest" value="${extensions.path}/${extension}/templateDetails.xml" override="true"/>
                                        <if>
                                            <available file="${extension.manifest}" type="file"/>
                                            <then/>
                                            <else>
                                                <echo level="warning">Manifest file not found: ${extension.manifest}
                                                </echo>
                                            </else>
                                        </if>
                                    </else>
                                </if>
                            </else>
                        </if>
                    </then>
                </if>

                <if>
                    <available file="${extension.manifest}"/>
                    <then>
                        <setVersion releasetype="custom" file="${extension.manifest}" property="extension.version" customvalue="${manifest.version}"/>
                        <phingcall target="update-creation">
                            <property name="project.manifest" value="${extension.manifest}"/>
                        </phingcall>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <!-- Pack the extension into a project -->
    <target name="pack-related-extensions" hidden="true">
        <if>
            <isset property="extension"/>
            <then>
                <echo>Packing the related extension: ${extension}</echo>

                <property name="extensions.tmp.path" value="${packages.tmp.path}/extensions"/>

                <!-- Do we have this extension pre-packed? -->
                <if>
                    <available file="${extensions.tmp.path}/${extension}" type="dir"/>
                    <then>
                        <echo>The extension ${extension} is pre-packed. Ignoring...</echo>
                    </then>
                    <else>
                        <!-- Is the extension path set? -->
                        <property name="extension.path" value="${project.${extension}.path}"/>

                        <echo message="${extension.path}" level="warning"/>

                        <fail unless="extension.path">-
Missing related extension property: project.${extension}.path
                        </fail>

                        <!-- Make sure we have the main extensions folder -->
                        <if>
                            <not>
                                <available file="${extensions.tmp.path}" type="dir"/>
                            </not>
                            <then>
                                <mkdir dir="${extensions.tmp.path}"/>
                            </then>
                        </if>

                        <!-- Run the related extension phing script -->
                        <mkdir dir="${extensions.tmp.path}/${extension}"/>
                        <exec command="phing -f ${extension.path}/build.xml build -Dpackages.tmp.path=${extensions.tmp.path}/${extension} -DignoreRelatedExtensions=${project.relatedExtensions} -logger phing.listener.DefaultLogger" logoutput="true" checkreturn="true"/>
                    </else>
                </if>
            </then>
        </if>
    </target>

    <!-- Pack the includes into a project -->
    <target name="pack-includes" hidden="true">
        <if>
            <isset property="include"/>
            <then>
                <echo>Packing the include: ${include}</echo>

                <property name="include.success" value="0" override="true"/>

                <!-- Is the include path set? -->
                <property name="include.path" value="project.${include}.path"/>
                <fail unless="include.path">-
Missing include property: ${include.path}
                </fail>

                <!-- Check if we have a custom source for this include. If not, use src/ -->
                <if>
                    <not>
                        <isset property="project.includes.${include}.source"/>
                    </not>
                    <then>
                        <property name="project.includes.${include}.source" value="src/" override="true"/>
                    </then>
                </if>

                <!-- Check if we have a custom destination for this include -->
                <if>
                    <not>
                        <isset property="project.includes.${include}.destination"/>
                    </not>
                    <then>
                        <property name="project.includes.${include}.destination" value=""/>
                    </then>
                </if>

                <!-- Run the include phing script -->
                <exec command="phing -f ${${include.path}}/build.xml copy -Dpackages.tmp.path=${packages.tmp.path}/${project.includes.${include}.destination} -logger phing.listener.DefaultLogger -Dproject.type=${project.type} -Dinclude.source=${project.includes.${include}.source}" logoutput="true" checkreturn="true"/>
            </then>
        </if>
    </target>

    <!-- Create Package without identifying version info -->
    <target name="package" hidden="true">
        <property name="package.path" value="${packages.path}/${package.file}"/>

        <!-- Remove the package, if exists -->
        <available file="${package.path}" property="package.path.exists" value="1"/>
        <if>
            <equals arg1="${package.path.exists}" arg2="1"/>
            <then>
                <delete file="${packages.path}/${package.file}"/>
            </then>
        </if>

        <!-- Prepare the package's temporary folders -->
        <if>
            <available file="${packages.tmp.path}" type="dir" property="packages.tmp.exists"/>
            <then>
                <delete dir="${packages.tmp.path}"/>
            </then>
        </if>
        <mkdir dir="${packages.tmp.path}"/>

        <!-- Merge and minify files -->
        <phingcall target="pre-build"/>

        <!-- Copy the installer library, if there is a custom installer script -->
        <if>
            <isset property="manifest.scriptfile"/>
            <then>
                <!-- Check if the installer library path is set -->
                <fail unless="project.ShackInstaller.path">-
Missing Installer property: project.ShackInstaller.path
                </fail>

                <property name="installer.source.path" value="${project.ShackInstaller.path}/src"/>
                <available file="${installer.source.path}" type="dir" property="installer.source.path.exists"/>
                <fail unless="installer.source.path">-
Unable to find directory: ${installer.source.path}
                </fail>

                <if>
                    <equals arg1="${composer.type}" arg2="joomla-component"/>
                    <then>
                        <property name="installer.tmp.path" value="${packages.tmp.path}/admin"/>
                    </then>
                    <else>
                        <property name="installer.tmp.path" value="${packages.tmp.path}"/>
                    </else>
                </if>

                <copy todir="${installer.tmp.path}">
                    <fileset dir="${installer.source.path}" id="installer-code">
                        <include name="**"/>
                        <exclude name="media/**"/>
                    </fileset>
                </copy>

                <!-- Installer media - it is separated because components use admin/site subfolders folders -->
                <copy todir="${packages.tmp.path}/media">
                    <fileset dir="${installer.source.path}/media" id="installer-media-code">
                        <include name="**"/>
                    </fileset>
                </copy>
            </then>
        </if>

        <!-- Copy the resources specified by the include tag -->
        <if>
            <isset property="project.includes"/>
            <then>
                <if>
                    <istrue value="${capabilities.parallel}"/>
                    <then>
                        <foreachParallel list="${project.includes}" param="include" target="pack-includes" delimiter="," threadCount="${builder.thread.count}"/>
                    </then>
                    <else>
                        <foreach list="${project.includes}" param="include" target="pack-includes" delimiter=","/>
                    </else>
                </if>
            </then>
            <else>
                <echo message="No Included Repositories" level="warning"/>
            </else>
        </if>

        <!-- Check if is a template or extension -->
        <if>
            <equals arg1="${composer.type}" arg2="joomla-template"/>
            <then>
                <!-- Template -->
                <phingcall target="build-template"/>
            </then>
            <else>
                <!-- Extension -->

                <!-- Copy the free source folder to a temporary location -->
                <if>
                    <equals arg1="${project.hasFreeVersion}" arg2="1"/>
                    <then>
                        <copy todir="${packages.tmp.path}" overwrite="true">
                            <fileset dir="${project.free.source.path}" id="free-code">
                                <include name="**"/>
                            </fileset>
                        </copy>
                    </then>
                </if>

                <!-- Pro extensions -->
                <if>
                    <equals arg1="${composer.extra.package-license}" arg2="pro"/>
                    <then>

                        <!-- Copy the pro source overriding the existent free code -->
                        <copy todir="${packages.tmp.path}" overwrite="true">
                            <fileset dir="${project.source.path}" id="pro-code">
                                <include name="**"/>
                            </fileset>
                        </copy>

                        <!-- Merge language files -->
                        <if>
                            <equals arg1="${composer.type}" arg2="joomla-component"/>
                            <then>
                                <if>
                                    <available file="${packages.tmp.path}/admin/language" type="dir"/>
                                    <then>
                                        <foreach param="dirname" absparam="absname" target="merge-language-files">
                                            <fileset dir="${packages.tmp.path}/admin/language/">
                                                <type type="dir"/>
                                                <depth max="0" min="0"/>
                                            </fileset>
                                        </foreach>
                                    </then>
                                </if>

                                <if>
                                    <available file="${packages.tmp.path}/site/language" type="dir"/>
                                    <then>
                                        <foreach param="dirname" absparam="absname" target="merge-language-files">
                                            <fileset dir="${packages.tmp.path}/site/language/">
                                                <type type="dir"/>
                                                <depth max="0" min="0"/>
                                            </fileset>
                                        </foreach>
                                    </then>
                                </if>
                            </then>
                            <else>
                                <foreach param="dirname" absparam="absname" target="merge-language-files">
                                    <fileset dir="${packages.tmp.path}/language/">
                                        <type type="dir"/>
                                        <depth max="0" min="0"/>
                                    </fileset>
                                </foreach>
                            </else>
                        </if>
                    </then>
                </if>
            </else>
        </if>

        <!-- Pack related extensions -->
        <if>
            <isset property="project.relatedExtensions"/>
            <then>
                <if>
                    <istrue value="${capabilities.parallel}"/>
                    <then>
                        <foreachParallel list="${project.relatedExtensions}" param="extension" target="pack-related-extensions" delimiter="," threadCount="${builder.thread.count}"/>
                    </then>
                    <else>
                        <foreach list="${project.relatedExtensions}" param="extension" target="pack-related-extensions" delimiter=","/>
                    </else>
                </if>
            </then>
            <else>
                <echo message="No Related Extensions" level="warning"/>
            </else>
        </if>

        <!-- PHP Lint -->
        <property name="project.phplint" value="1" override="false"/>
        <if>
            <equals arg1="${project.phplint}" arg2="1"/>
            <then>
                <echo message="Running PhpLint: [${php.interpreter}] v${php.version}"/>
                <phplint haltonfailure="true">
                    <fileset dir="${packages.tmp.path}">
                        <include name="**/*.php"/>
                    </fileset>
                </phplint>
            </then>
        </if>

        <if>
            <equals arg1="${buildingdirectly}" arg2="1"/>
            <then>
                <!-- Pack the tmp folder -->
                <zip destfile="${packages.path}/${package.file}" includeemptydirs="true" basedir="${packages.tmp.path}"/>

                <!-- Check if we want to move the new package to a new destination -->
                <if>
                    <equals arg1="${project.movePackage}" arg2="1"/>
                    <then>
                        <echo>Moving package...</echo>
                        <move file="${packages.path}/${package.file}" tofile="${project.movePackageTo}/${package.file}" overwrite="true"/>
                    </then>
                </if>

                <!-- Remove tmp folder -->
                <if>
                    <istrue value="${builder.debug}"/>
                    <then>
                        <echoproperties destfile="packager.properties"/>
                    </then>
                    <else>
                        <delete dir="${packages.tmp.path}"/>
                    </else>
                </if>
            </then>
        </if>
    </target>

    <target name="compile-scss-file" hidden="true">
        <available property="scss.file.exists" file="${scss.file.source}" type="file" value="1"/>
        <if>
            <equals arg1="${scss.file.exists}" arg2="1"/>
            <then>
                <if>
                    <isset property="scss.destination"/>
                    <then>
                        <basename file="${scss.file.base}" property="scss.file.name"/>
                        <property name="scss.file.destination" value="${scss.destination}/${scss.file.name}"/>
                    </then>
                    <else>
                        <property name="scss.file.destination" value="${project.source.path}/${scss.file.base}"/>
                    </else>
                </if>

            </then>
            <else>
                <echo message="${scss.file.source}: Does not exist"/>
                <fail>-
${scss.file.source}: Does not exist
                </fail>
            </else>
        </if>

        <exec command="node-sass --output-style=${scss.style} ${scss.file.source} ${scss.file.destination}" returnProperty="scss.result" outputProperty="scss.output"/>
        <if>
            <equals arg1="${scss.result}" arg2="0"/>
            <then>
                <echo message="${scss.file.base} [OK]" level="info"/>
            </then>
            <else>
                <echo level="info">-
                    "${scss.file.base} [ERROR]${line.separator}${scss.output}${line.separator}${line.separator}
                </echo>
                <fail>-
SCSS Compile Failed
                </fail>
            </else>
        </if>
    </target>

    <target name="pre-build" description="Compile and minify designated files">
        <!-- SCSS compiling -->
        <if>
            <isset property="manifest.alledia.scss.file"/>
            <then>
                <trycatch>
                    <try>
                        <exec command="node-sass -v" outputProperty="scss.test" checkreturn="true"/>
                    </try>
                    <catch>
                        <fail>-
node-sass command is not available for compiling scss files
                        </fail>
                    </catch>
                </trycatch>
                <if>
                    <isset property="manifest.alledia.scss.destination"/>
                    <then>
                        <property name="scss.destination" value="${project.source.path}/${manifest.alledia.scss.destination}"/>
                        <mkdir dir="${scss.destination}"/>
                    </then>
                </if>
                <if>
                    <matches string="${manifest.alledia.scss.style}" pattern="^(nested|expanded|compact|compressed)$"/>
                    <then>
                        <property name="scss.style" value="${manifest.alledia.scss.style}"/>
                    </then>
                    <else>
                        <property name="scss.style" value="compressed"/>
                    </else>
                </if>
                <foreach target="compile-scss-file" absparam="scss.file.source" param="scss.file.base">
                    <mapper type="glob" from="*.scss" to="*.css"/>
                    <filelist dir="${project.source.path}" files="${manifest.alledia.scss.file}"/>
                </foreach>
            </then>
        </if>

        <!-- Minify bundling scripts -->
        <if>
            <isset property="manifest.alledia.minify.suffix"/>
            <then>
                <property name="minify.suffix" value="${manifest.alledia.minify.suffix}"/>
            </then>
            <else>
                <property name="minify.suffix" value=".min"/>
            </else>
        </if>

        <mergeMinify manifest="${project.manifest}" basePath="${project.source.path}" suffix="${minify.suffix}"/>
    </target>

    <target name="merge-language-files" hidden="true">
        <mergeFiles basepath="${absname}" pattern=".pro." replace="."/>
    </target>

    <target name="build-template" hidden="true">
        <xmlproperty file="${project.source.path}/templateDetails.xml" prefix="templateDetails" keepRoot="false"/>

        <if>
            <available file="${project.path}/readme.properties" type="file"/>
            <then>
                <property file="${project.path}/readme.properties"/>
            </then>
        </if>

        <property name="project.wright.path" value="${project.path}/wright/src"/>

        <!-- Copy in framework -->
        <available file="${project.wright.path}/wright" type="dir" property="wright.exists"/>
        <if>
            <equals arg1="${wright.exists}" arg2="true"/>
            <then>
                <xmlproperty file="${project.wright.path}/templateDetails.xml" prefix="wrightDetails" keepRoot="false"/>

                <copy todir="${packages.tmp.path}/wright" overwrite="true">
                    <fileset dir="${project.wright.path}/wright">
                        <exclude name=".svn"/>
                        <exclude name=".svn/**"/>
                        <exclude name=".git"/>
                        <exclude name=".git/**"/>
                        <exclude name=".project"/>
                        <exclude name=".DS_Store"/>
                    </fileset>
                </copy>
            </then>
        </if>

        <!-- Copy the template files -->
        <copy todir="${packages.tmp.path}" overwrite="true">
            <fileset dir="${project.source.path}">
                <exclude name=".svn"/>
                <exclude name=".svn/**"/>
                <exclude name=".git"/>
                <exclude name=".git/**"/>
                <exclude name=".project"/>
                <exclude name=".DS_Store"/>
            </fileset>
        </copy>

        <!-- If it's the Wright Framework itself -->
        <if>
            <equals arg1="${project.is_wright}" arg2="1"/>
            <then>
                <templateDetails todir="${packages.tmp.path}" version="${templateDetails.version}" templatename="wright" documentationLink="${readme.docs}"/>
            </then>
            <else>
                <if>
                    <equals arg1="${wright.exists}" arg2="true"/>
                    <then>
                        <!-- Copy common Wright files (without replacing to prevail any template specific override) -->
                        <copy file="${project.wright.path}/index.php" tofile="${packages.tmp.path}/index.php"/>
                        <copy file="${project.wright.path}/favicon.ico" tofile="${packages.tmp.path}/favicon.ico"/>
                        <copy file="${project.wright.path}/component.php" tofile="${packages.tmp.path}/component.php"/>
                        <if>
                            <available file="${project.wright.path}/wrighttemplate.php"/>
                            <then>
                                <copy file="${project.wright.path}/wrighttemplate.php" tofile="${packages.tmp.path}/wrighttemplate.php"/>
                            </then>
                        </if>

                        <!-- Updates template/wright version in wright.php and other template details -->
                        <templateDetails todir="${packages.tmp.path}" version="${templateDetails.version}_${wrightDetails.version}" templatename="${manifest.name}" documentationLink="${readme.docs}"/>

                        <!-- html, css and js folders only copied for responsive (Wright v.3) templates, until standardized in Wright v.2 -->
                        <copy todir="${packages.tmp.path}/html">
                            <fileset dir="${project.wright.path}/html">
                                <exclude name=".svn"/>
                                <exclude name=".svn/**"/>
                                <exclude name=".git"/>
                                <exclude name=".git/**"/>
                                <exclude name=".project"/>
                                <exclude name=".DS_Store"/>
                            </fileset>
                        </copy>
                        <copy todir="${packages.tmp.path}/css">
                            <fileset dir="${project.wright.path}/css">
                                <exclude name=".svn"/>
                                <exclude name=".svn/**"/>
                                <exclude name=".git"/>
                                <exclude name=".git/**"/>
                                <exclude name=".project"/>
                                <exclude name=".DS_Store"/>
                            </fileset>
                        </copy>
                        <copy todir="${packages.tmp.path}/js">
                            <fileset dir="${project.wright.path}/js">
                                <exclude name=".svn"/>
                                <exclude name=".svn/**"/>
                                <exclude name=".git"/>
                                <exclude name=".git/**"/>
                                <exclude name=".project"/>
                                <exclude name=".DS_Store"/>
                            </fileset>
                        </copy>
                    </then>
                </if>
            </else>
        </if>

        <!-- Sets version in template language files -->
        <available file="${packages.tmp.path}/language" type="dir" property="language.exists"/>
        <if>
            <equals arg1="${language.exists}" arg2="true"/>
            <then>
                <templateVersion todir="${packages.tmp.path}" template="${templateDetails.name}" version="${templateDetails.version}"/>
            </then>
        </if>

        <phingcall target="build-assets"/>
    </target>

    <target name="build-assets" hidden="true">
        <property name="write.build.path" value="${packages.tmp.path}/wright/build"/>

        <!-- Check if the CSS folder exists. If not, make one -->
        <if>
            <not>
                <available file="${packages.tmp.path}/css" type="dir"/>
            </not>
            <then>
                <mkdir dir="${packages.tmp.path}/css"/>
            </then>
        </if>

        <!-- Check if the JS folder exists. If not, make one -->
        <if>
            <not>
                <available file="${packages.tmp.path}/js" type="dir"/>
            </not>
            <then>
                <mkdir dir="${packages.tmp.path}/js"/>
            </then>
        </if>

        <available file="${write.build.path}" type="dir" property="write.build.path.exists"/>
        <if>
            <equals arg1="${write.build.path.exists}" arg2="true"/>
            <then>
                <!-- Build the CSS and JS code -->
                <!-- Node.JS tasks for building the latest CSS and JS code -->
                <exec command="sh install.sh" logoutput="true" dir="${write.build.path}" returnProperty="returnValue"/>

                <!-- Look for errors on the last command -->
                <if>
                    <equals arg1="${returnValue}" arg2="1"/>
                    <then>
                        <fail>-
Error found on the last executed command. Please, check the logs.
                        </fail>
                    </then>
                </if>

                <exec command="node build.js" logoutput="true" dir="${write.build.path}" returnProperty="returnValue"/>

                <!-- Look for errors on the last command -->
                <if>
                    <equals arg1="${returnValue}" arg2="1"/>
                    <then>
                        <fail>-
Error found on the last executed command. Please, check the logs.
                        </fail>
                    </then>
                </if>

                <delete dir="${write.build.path}/.cache"/>
                <delete dir="${write.build.path}/node_modules"/>
                <!-- Copy builder LESS and all files to sources -->
                <mkdir dir="${packages.tmp.path}/sources"/>
                <mkdir dir="${packages.tmp.path}/sources/less"/>
                <mkdir dir="${packages.tmp.path}/sources/wright"/>
                <mkdir dir="${packages.tmp.path}/sources/wright/build"/>
                <copy todir="${packages.tmp.path}/sources/less" overwrite="true">
                    <fileset dir="${packages.tmp.path}/less"/>
                </copy>
                <copy todir="${packages.tmp.path}/sources/wright/build" overwrite="true">
                    <fileset dir="${write.build.path}"/>
                </copy>
            </then>
        </if>
    </target>

    <!-- Update creation date in Joomla manifest file -->
    <target name="update-creation" description="Update creation date in all manifests">
        <tstamp prefix="creation"/>

        <property name="creation.find" value=""><![CDATA[<creationDate>.*</creationDate>]]></property>
        <property name="creation.replace" value=""><![CDATA[<creationDate>${creation.TODAY}</creationDate>]]></property>
        <reflexive file="${project.manifest}">
            <filterchain>
                <replaceregexp>
                    <!--suppress PhingDomInspection -->
                    <regexp pattern="${creation.find}" replace="${creation.replace}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <echo message="Creation Date: ${creation.TODAY}"/>
    </target>

    <target name="prompt-new-version" hidden="true">
        <echo><![CDATA[
            ===========================================
            Current version: ${manifest.version}
            -------------------------------------------
            New version level:

            (1) Major
            (2) Minor
            (3) Bugfix
            - - - - - - - - - - - - - - - - - - - - -
            (4) Alpha
            (5) Beta
            (6) RC
            (7) Custom
            - - - - - - - - - - - - - - - - - - - - -
            (8) Stable Release
            ===========================================
        ]]></echo>
        <input
            propertyName="release.id"
            validArgs="1, 2, 3, 4, 5, 6, 7, 8"
            message="Release Type: "/>

        <if>
            <equals arg1="${release.id}" arg2="1"/>
            <then>
                <property name="release.type" value="major"/>
            </then>
            <elseif>
                <equals arg1="${release.id}" arg2="2"/>
                <then>
                    <property name="release.type" value="minor"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="3"/>
                <then>
                    <property name="release.type" value="bugfix"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="4"/>
                <then>
                    <property name="release.type" value="a"/>
                    <phingcall target="prompt-new-dev-version"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="5"/>
                <then>
                    <property name="release.type" value="b"/>
                    <phingcall target="prompt-new-dev-version"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="6"/>
                <then>
                    <property name="release.type" value="rc"/>
                    <phingcall target="prompt-new-dev-version"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="7"/>
                <then>
                    <property name="release.type" value="custom"/>
                    <input
                        propertyName="release.custom_version"
                        defaultValue="${manifest.version}"
                        message="Custom version: "/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="8"/>
                <then>
                    <property name="release.type" value="stable"/>
                </then>
            </elseif>
        </if>
    </target>

    <target name="prompt-new-dev-version" hidden="true">
        <echo><![CDATA[
            ===========================================
            Are you starting a new release cycle?
            -------------------------------------------
            (1) Major
            (2) Minor
            (3) Bugfix
            - - - - - - - - - - - - - - - - - - - - -
            (0) No, keep current base version
            ===========================================
        ]]></echo>
        <input
            propertyName="release.id"
            validArgs="1, 2, 3, 7, 0"
            defaultValue="0"
            message="Release Type: "/>

        <if>
            <equals arg1="${release.id}" arg2="1"/>
            <then>
                <property name="new.release.type" value="major"/>
            </then>
            <elseif>
                <equals arg1="${release.id}" arg2="2"/>
                <then>
                    <property name="new.release.type" value="minor"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="3"/>
                <then>
                    <property name="new.release.type" value="bugfix"/>
                </then>
            </elseif>
        </if>

        <if>
            <not>
                <equals arg1="${release.id}" arg2="0"/>
            </not>
            <then>
                <setVersion releasetype="${new.release.type}" file="${project.manifest}" property="manifest.version" customvalue="${new.release.custom_version}"/>
                <phingcall target="update-creation"/>

                <!-- Update the version for related extensions which are not on this repo, but still set to update -->
                <foreach list="${project.relatedExtensions}" param="extension" target="set-version-related-extensions" delimiter=","/>
            </then>
        </if>

    </target>
</project>
