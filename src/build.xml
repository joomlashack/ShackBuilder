<?xml version="1.0" encoding="UTF-8"?>
<project default="build">
    <property name="builder.name" value="ShackBuilder"/>
    <property name="builder.version" value="4.0.10"/>
    <echo message="${builder.name} Version ${builder.version}"/>

    <property name="builder.path.source" value="${builder.path}/src"/>
    <includepath classpath="${builder.path.source}"/>

    <!-- Global properties -->
    <if>
        <available file="${builder.path}/global.properties" type="file"/>
        <then>
            <property file="${builder.path}/global.properties"/>
        </then>
    </if>

    <!-- set some defaults if not already set -->
    <property name="builder.thread.count" value="2"/>

    <!-- Ensure project.hasFreeVersion is set if not done explicitly -->
    <if>
        <not>
            <isset property="project.hasFreeVersion"/>
        </not>
        <then>
            <if>
                <equals arg1="${composer.extra.package-license}" arg2="pro"/>
                <then>
                    <property name="project.hasFreeVersion" value="0"/>
                </then>
                <else>
                    <property name="project.hasFreeVersion" value="1"/>
                </else>
            </if>
        </then>
    </if>

    <property name="builder.vendor.bin.path" value="${builder.path}/vendor/bin"/>

    <!-- check capabilities -->
    <php function="extension_loaded" returnProperty="capabilities.parallel">
        <param value="pcntl"/>
    </php>

    <!-- Include the external tasks -->
    <includepath classpath="${builder.path}/src/tasks"/>
    <taskdef name="propertiesFromComposer" classname="tasks.PropertiesFromComposerTask"/>
    <taskdef name="setVersion" classname="tasks.SetversionTask"/>
    <taskdef name="mergeFiles" classname="tasks.MergeFilesTask"/>
    <taskdef name="getRelatedExtensions" classname="tasks.RelatedExtensionsTask"/>
    <taskdef name="getIncludes" classname="tasks.IncludesTask"/>
    <taskdef name="foreachParallel" classname="tasks.ForeachParallelTask"/>
    <taskdef name="templateVersion" classname="tasks.TemplateVersionTask"/>
    <taskdef name="templateDetails" classname="tasks.TemplateDetailsTask"/>
    <taskdef name="mergeMinify" classname="tasks.MergeMinifyTask"/>
    <taskdef name="copyLanguage" classname="tasks.CopyLanguageTask"/>
    <taskdef name="standardsFixes" classname="tasks.StandardsFixesTask"/>

    <if>
        <available file="${home.path}/.composer/vendor/autoload.php" property="exi"/>
        <then>
            <autoloader autoloaderpath="${home.path}/.composer/vendor/autoload.php"/>
        </then>
    </if>

    <!-- Get the project path from the build.properties -->
    <if>
        <not>
            <isset property="project.path"/>
        </not>
        <then>
            <property name="project.path" value="${project.basedir}"/>
        </then>
    </if>

    <propertiesFromComposer file="${project.path}/composer.json" prefix="composer"/>

    <!-- set default values -->
    <property name="project.source.path" value="${project.path}/src"/>
    <property name="project.name.short" value="${composer.extra.element-short}"/>
    <property name="project.name.long" value="${composer.extra.element}"/>
    <property name="builder.debug" value="0"/>

    <!-- Set the free extension path -->
    <if>
        <equals arg1="${project.hasFreeVersion}" arg2="1"/>
        <then>
            <if>
                <equals arg1="${composer.extra.package-license}" arg2="pro"/>
                <then>
                    <if>
                        <isset property="project.${composer.extra.name}.path"/>
                        <then>
                            <property name="project.free.source.path" value="${project.${composer.extra.name}.path}/src"/>
                        </then>
                        <else>
                            <fail>-
Missing path to Free version: project.${composer.extra.name}.path property
                            </fail>
                        </else>
                    </if>
                </then>
                <else>
                    <property name="project.free.source.path" value="${project.source.path}"/>
                </else>
            </if>
        </then>
    </if>

    <!-- Check if we are building the package directly or as a related extension -->
    <!-- If it is a related extension, we will receive these properties from the command line -->
    <if>
        <not>
            <isset property="packages.tmp.path"/>
        </not>
        <then>
            <!-- We are building the package directly -->
            <property name="packages.path" value="${project.path}/packages"/>
            <property name="packages.tmp.path" value="${packages.path}/tmp"/>
            <property name="buildingdirectly" value="1"/>
        </then>
        <else>
            <property name="buildingdirectly" value="0"/>
        </else>
    </if>

    <!-- Parse the manifest file and get properties -->
    <property name="project.manifest" value="${project.source.path}/${project.name.short}.xml"/>
    <if>
        <available file="${project.manifest}" property="project.manifest.exists"/>
        <then/>
        <else>
            <property name="project.manifest" value="${project.source.path}/${project.type}_${project.name.short}.xml" override="true"/>

            <if>
                <available file="${project.manifest}" property="project.manifest.exists"/>
                <then/>
                <else>
                    <property name="project.manifest" value="${project.source.path}/templateDetails.xml" override="true"/>
                </else>
            </if>
        </else>
    </if>
    <xmlproperty file="${project.manifest}" prefix="manifest" keepRoot="false" collapseAttributes="true"/>

    <getRelatedExtensions file="${project.manifest}" property="project.relatedExtensions" ignoreRelatedExtensions="${ignoreRelatedExtensions}"/>

    <getIncludes file="${project.manifest}" property="project.includes" ignoreIncludes="${ignoreIncludes}"/>

    <target name="copy-language" description="Copy language files from one code to a new one">
        <echo level="warning">Create language files from existing files</echo>

        <input propertyName="language.source"
               message="From: "
               defaultValue="en-GB"/>

        <input propertyName="language.target"
               message="  To: "/>

        <copyLanguage from="${language.source}" to="${language.target}"/>
    </target>

    <target name="standards" description="Check formatting/settigns in composer/manifest files">
        <if>
            <istrue value="${builder.debug}"/>
            <then>
                <echoproperties destfile="standards.properties"/>
            </then>
        </if>

        <standardsFixes manifest="${project.manifest}"/>
    </target>

    <!-- Load sub-projects -->
    <import>
        <fileset dir="${builder.path.source}/projects">
            <include name="*.xml"/>
        </fileset>
    </import>
</project>
